{
    "docs": [
        {
            "location": "/", 
            "text": "Template Based Scaffolding for PostgreSQL\n\n\npg-generator\n is a command line utility which generates files for each table and schema of a PostgreSQL database.\n\n\n\n\n\nReverse engineers PostgreSQL database,\n\n\nExecutes \nnunjucks\n templates for each table, schema and for database,\n\n\nMakes database objects available to templates using \npg-structure\n.\n\n\n\n\npg-generator\n takes your burden of manually creating ORM files or any other files which are based on database structure.\n\n\nInstallation\n\n\n$ npm install -g pg-generator\n\n\n\nSequelize Example\n\n\nSee \nsequelize template\n for usage and details.\n\n\n$ pgen template sequelize -t sequelize-template\n$ pgen exec sequelize-template -d our_crm -u user -p tOpSeCrEt -t model\n\n\n\nFirst command copies one of the builtin templates (sequelize) into target directory (sequelize-template). Second command generates files based on given template (sequelize-template) into target directory (model).  \n\n\nBasic Usage\n\n\n\n\nUse \npgen template\n to copy one of the builtin templates or create your own template. (You can use base template for starting up.)\n\n\nUse \npgen exec\n to create files based on your template.\n\n\n\n\nTemplate\n\n\nCreating a template from scratch is easy. Execute command below:\n\n\n$ pgen template base -t my-template\n\n\n\nTo see a basic example execute following command from shell and examine files in tutorial-example directory. \n\n\n$ pgen template tutorial -t tutorial-template\n\n\n\nFor a full fledged example which we use at Fortibase, see Sequelize Example above. \n\n\nFor Low Level Direct Access: \npg-structure\n\n\nIf you prefer lower level methods to directly access PostgreSQL structure to build your own generators. You can check \npg-structure\n module which is used to build this module and provides direct access to database structure. \n\n\nFull Documentation\n\n\nDocumentation is available on \npg-generator.com\n\n\nSpecial Thanks\n\n\npg-generator\n is developed under sponsorship of \nFortibase\n and released as open source. See \nlicense\n.\n\n\nAlso documentation is auto generated thanks to:\n\n\n\n\nMkDocs\n using a \ntheme\n provided by \nRead the Docs\n.\n\n\nMarkdown is generated by \njsdoc-to-markdown\n\n\n\n\nContributions\n\n\n\n\nFor contribution please send pull requests with tests on \nGitHub\n.\n\n\nSend bugs and feature requests to \nGitHub Issues\n.", 
            "title": "Home"
        }, 
        {
            "location": "/#template-based-scaffolding-for-postgresql", 
            "text": "pg-generator  is a command line utility which generates files for each table and schema of a PostgreSQL database.   Reverse engineers PostgreSQL database,  Executes  nunjucks  templates for each table, schema and for database,  Makes database objects available to templates using  pg-structure .   pg-generator  takes your burden of manually creating ORM files or any other files which are based on database structure.", 
            "title": "Template Based Scaffolding for PostgreSQL"
        }, 
        {
            "location": "/#installation", 
            "text": "$ npm install -g pg-generator", 
            "title": "Installation"
        }, 
        {
            "location": "/#sequelize-example", 
            "text": "See  sequelize template  for usage and details.  $ pgen template sequelize -t sequelize-template\n$ pgen exec sequelize-template -d our_crm -u user -p tOpSeCrEt -t model  First command copies one of the builtin templates (sequelize) into target directory (sequelize-template). Second command generates files based on given template (sequelize-template) into target directory (model).", 
            "title": "Sequelize Example"
        }, 
        {
            "location": "/#basic-usage", 
            "text": "Use  pgen template  to copy one of the builtin templates or create your own template. (You can use base template for starting up.)  Use  pgen exec  to create files based on your template.", 
            "title": "Basic Usage"
        }, 
        {
            "location": "/#template", 
            "text": "Creating a template from scratch is easy. Execute command below:  $ pgen template base -t my-template  To see a basic example execute following command from shell and examine files in tutorial-example directory.   $ pgen template tutorial -t tutorial-template  For a full fledged example which we use at Fortibase, see Sequelize Example above.", 
            "title": "Template"
        }, 
        {
            "location": "/#for-low-level-direct-access-pg-structure", 
            "text": "If you prefer lower level methods to directly access PostgreSQL structure to build your own generators. You can check  pg-structure  module which is used to build this module and provides direct access to database structure.", 
            "title": "For Low Level Direct Access: pg-structure"
        }, 
        {
            "location": "/#full-documentation", 
            "text": "Documentation is available on  pg-generator.com", 
            "title": "Full Documentation"
        }, 
        {
            "location": "/#special-thanks", 
            "text": "pg-generator  is developed under sponsorship of  Fortibase  and released as open source. See  license .  Also documentation is auto generated thanks to:   MkDocs  using a  theme  provided by  Read the Docs .  Markdown is generated by  jsdoc-to-markdown", 
            "title": "Special Thanks"
        }, 
        {
            "location": "/#contributions", 
            "text": "For contribution please send pull requests with tests on  GitHub .  Send bugs and feature requests to  GitHub Issues .", 
            "title": "Contributions"
        }, 
        {
            "location": "/migration/", 
            "text": "Migration from v2 to v3\n\n\nIf you use builtin templates without modification, just regenerate them and use \npgen\n as usual.\n\n\nFor those using modified templates or their own templates, below are some steps to migrate from v2 to v3:\n\n\nYou should add \n.array\n method call to loops.\n\n\nv2:    \n\n\n{% for column in table.columns -%}\n\n{% endfor %}\n\n\n\nv3:\n\n\n{% for column in table.columns.array -%}\n\n{% endfor %}\n\n\n\nv2:\n\n\n{{ relation.sourceConstraint.columns[0].name }}\n\n\n\nv3:\n\n\n{{ relation.sourceConstraint.columns.array[0].name }}\n\n\n\nChange \ncolumn#foreignKeyConstraint\n to \ncolumn#foreignKeyConstraints.array\n\n\nIn database, same column may be part of more than one foreign key constraints. Because of this foreignKeyConstraint\nis changed to foreignKeyConstraints in pg-structure module. As a consequence you should change your templates like example\nbelow:\n\n\nv2:\n\n\n{{ column.foreignKeyConstraint }}\n\n\n\nv3:\n\n\n{{ column.foreignKeyConstraints.array[0] }}\n\n\n\nChange \ncolumn#referencedColumn\n to \ncolumn#referencedColumns.array\n\n\nSame reason above.\n\n\nv2:\n\n\n{{ column.referencedColumn }}\n\n\n\nv3:\n\n\n{{ column.referencedColumns.array[0] }}", 
            "title": "Migration"
        }, 
        {
            "location": "/migration/#migration-from-v2-to-v3", 
            "text": "If you use builtin templates without modification, just regenerate them and use  pgen  as usual.  For those using modified templates or their own templates, below are some steps to migrate from v2 to v3:", 
            "title": "Migration from v2 to v3"
        }, 
        {
            "location": "/migration/#you-should-add-array-method-call-to-loops", 
            "text": "v2:      {% for column in table.columns -%}\n\n{% endfor %}  v3:  {% for column in table.columns.array -%}\n\n{% endfor %}  v2:  {{ relation.sourceConstraint.columns[0].name }}  v3:  {{ relation.sourceConstraint.columns.array[0].name }}", 
            "title": "You should add .array method call to loops."
        }, 
        {
            "location": "/migration/#change-columnforeignkeyconstraint-to-columnforeignkeyconstraintsarray", 
            "text": "In database, same column may be part of more than one foreign key constraints. Because of this foreignKeyConstraint\nis changed to foreignKeyConstraints in pg-structure module. As a consequence you should change your templates like example\nbelow:  v2:  {{ column.foreignKeyConstraint }}  v3:  {{ column.foreignKeyConstraints.array[0] }}", 
            "title": "Change column#foreignKeyConstraint to column#foreignKeyConstraints.array"
        }, 
        {
            "location": "/migration/#change-columnreferencedcolumn-to-columnreferencedcolumnsarray", 
            "text": "Same reason above.  v2:  {{ column.referencedColumn }}  v3:  {{ column.referencedColumns.array[0] }}", 
            "title": "Change column#referencedColumn to column#referencedColumns.array"
        }, 
        {
            "location": "/template/template/", 
            "text": "Templates\n\n\npg-generator uses templates to generate files. A pg-generator template is a directory containing some special named directories and \nnunjucks\n files.\n\n\nDevelopers can use one of the pg-generator's builtin templates or create or modify templates according to their needs.", 
            "title": "Template"
        }, 
        {
            "location": "/template/template/#templates", 
            "text": "pg-generator uses templates to generate files. A pg-generator template is a directory containing some special named directories and  nunjucks  files.  Developers can use one of the pg-generator's builtin templates or create or modify templates according to their needs.", 
            "title": "Templates"
        }, 
        {
            "location": "/template/directories-files/", 
            "text": "Special Template Directories \n Files\n\n\npg-generator templates contain several directories and files. Directories and files listed below are part of pg-generator templates. \nnunjucks\n templates located in those directories are executed once or more. They create files in same relative position as relative position to their parent directory.\n\n\nFor example\n:\n\n\nTemplate directory\n: .../sequelize\n\n\nTarget directory\n: .../model\n\n\nDatabase name\n: crm\n\n\nDatabase schemas\n: public\n\n\nDatabase tables\n: company, contact, product\n\n\n\n\n\n\n\n\nTemplate File\n\n\nCreated File\n\n\n\n\n\n\n\n\n\n\n.../sequelize/db/{db.name}.js.nunj.html\n\n\n.../model/crm.js\n\n\n\n\n\n\n.../sequelize/schema/{schema.name}.js.nunj.html\n\n\n.../model/public.js\n\n\n\n\n\n\n.../sequelize/schema/sub/{schema.name}.js.nunj.html\n\n\n.../model/sub/public.js\n\n\n\n\n\n\n.../sequelize/table/{table.name}.js.nunj.html\n\n\n.../model/company.js\n\n\n\n\n\n\n.../sequelize/table/{table.schema.name}/{table.name}.js.nunj.html\n\n\n.../model/public/company.js\n\n\n\n\n\n\n\n\n\"db\" directory\n\n\nTemplate files in \ndb\n are executed once for the database. Variables listed below are available in those template files. \n\n\n\n\n\n\n\n\nVarible Name\n\n\nDescription\n\n\nExample\n\n\n\n\n\n\n\n\n\n\ndb\n\n\npg-structure database object to access database details.\n\n\nDB API\n\n\n\n\n\n\ncustom\n\n\nCustom data provided by custom data file.\n\n\nSee below\n\n\n\n\n\n\noptions\n\n\nOptions provided by custom options file.\n\n\nSee below\n\n\n\n\n\n\n{...}\n\n\nAny variable provided by index.js file's allData export.\n\n\nSee below\n\n\n\n\n\n\n{...}\n\n\nAny variable provided by index.js file's dbData export.\n\n\nSee below\n\n\n\n\n\n\n\n\n\"schema\" directory\n\n\nTemplate files in \nschema\n are executed for each PostgreSQL schema. Variables listed below are available in those template files. Files in this directory are created relative to the root of target directory.\n\n\n\n\n\n\n\n\nVarible Name\n\n\nDescription\n\n\nExample\n\n\n\n\n\n\n\n\n\n\nschema\n\n\npg-structure schema object to access database details.\n\n\nSchema API\n\n\n\n\n\n\ncustom\n\n\nCustom data provided by custom data file.\n\n\nSee below\n\n\n\n\n\n\noptions\n\n\nOptions provided by custom options file.\n\n\nSee below\n\n\n\n\n\n\n{...}\n\n\nAny variable provided by index.js file's allData export.\n\n\nSee below\n\n\n\n\n\n\n{...}\n\n\nAny variable provided by index.js file's schemaData export.\n\n\nSee below\n\n\n\n\n\n\n\n\n\"table\" directory\n\n\nTemplate files in \ntable\n are executed for each table. Variables listed below are available in those template files. Files in this directory are created relative to the root of target directory.\n\n\n\n\n\n\n\n\nVarible Name\n\n\nDescription\n\n\nExample\n\n\n\n\n\n\n\n\n\n\nschema\n\n\npg-structure table object to access database details.\n\n\nTable API\n\n\n\n\n\n\ncustom\n\n\nCustom data provided by custom data file.\n\n\nSee below\n\n\n\n\n\n\noptions\n\n\nOptions provided by custom options file.\n\n\nSee below\n\n\n\n\n\n\n{...}\n\n\nAny variable provided by index.js file's allData export.\n\n\nSee below\n\n\n\n\n\n\n{...}\n\n\nAny variable provided by index.js file's tableData export.\n\n\nSee below\n\n\n\n\n\n\n\n\n\"copy\" directory\n\n\nFiles in this directory are not processed by template engine and directly copied to target. Files in this directory are copied relative to the root of target directory.\n\n\n\"index.js\" file\n\n\nindex.js\n file is a node.js module file which exports \nallData\n, \ndbData\n, \nschemaData\n and \ntableData\n functions. Those functions are used to provide additional variables to template files. It makes pg-generator templates very flexible. See \nTemplate Module API\n\n\n'use strict';\n\n// This file is used for providing additional data to templates during generation phase.\n\nfunction allData(db) {\n    return {\n        extraAll: db.name\n    };\n}\n\nfunction dbData(db) {\n    return {\n        extra: db.name\n    };\n}\n\nfunction schemaData(schema) {\n    return {\n        extra: schema.name\n    };\n}\n\nfunction tableData(table) {\n    return {\n        extra: table.name\n    };\n}\n\nmodule.exports = {\n    allData: allData,\n    dbData: dbData,\n    schemaData: schemaData,\n    tableData: tableData\n};\n\n\n\n\nOther Directories \n Files\n\n\nOther directories and files do not have any meaning for pg-generator and they are not used. However you can create any directory to organize your partial templates.\n\n\nExternal Files\n\n\nExternal files are not part of the template. These optional files are set during file generation phase dynamically by options provided to \npgen\n command.\n\n\n$ pgen sequelize --datafile custom-data.js --optionsFile customOptions\n\n\n\nCustom Data File\n\n\nThis optional file is a node.js module which should export a simple JavaScript object. Exported object can be accessed with variable named \ncustom\n in template files. This data may be used very flexible ways for various reasons. For example builtin sequelize template uses this file for letting user to change some default behavior of template.\n\n\nExample\n\n\n'use strict';\n\nmodule.exports = {\n    Account: {\n        schema: 'super_schema',\n        customTableAttribute: '\ntableAtt\n',\n        attributes: {\n            id: { attributeName: 'ID', type: '\nfake_type_id\n', onUpdate: '\nUPDATE ME\n', customAttribute: 3 },\n            ss: { type: '\nfake_type_ss\n', specialAttribute: '\nok\n' },\n            dd: { type: '\nfake_type_dd\n', onUpdate: '\nUPDATE ME TOO\n', specA: 3, specB: 4, specC: 6 }\n        },\n        hasMany: {\n            HasContacts: {\n                as: 'CustomHasContacts'\n            }\n        },\n        belongsTo: {\n            Owner: {\n                as: 'CustomBelongsTo'\n            }\n        },\n        belongsToMany: {\n            ContactSecondCompanies: {\n                as: 'CustomBelongsToMany',\n                foreignKey: 'fake_id'\n            }\n        }\n    }\n};\n\n\n\n\nOptions File\n\n\nThis optional file is a node.js module which should export a simple JavaScript object. Exported object can be accessed with variable named \noptions\n in template files. Usage of this file is same as custom data file except variable name used for accessing data.", 
            "title": "Directories & Files"
        }, 
        {
            "location": "/template/directories-files/#special-template-directories-files", 
            "text": "pg-generator templates contain several directories and files. Directories and files listed below are part of pg-generator templates.  nunjucks  templates located in those directories are executed once or more. They create files in same relative position as relative position to their parent directory.  For example :  Template directory : .../sequelize  Target directory : .../model  Database name : crm  Database schemas : public  Database tables : company, contact, product     Template File  Created File      .../sequelize/db/{db.name}.js.nunj.html  .../model/crm.js    .../sequelize/schema/{schema.name}.js.nunj.html  .../model/public.js    .../sequelize/schema/sub/{schema.name}.js.nunj.html  .../model/sub/public.js    .../sequelize/table/{table.name}.js.nunj.html  .../model/company.js    .../sequelize/table/{table.schema.name}/{table.name}.js.nunj.html  .../model/public/company.js", 
            "title": "Special Template Directories &amp; Files"
        }, 
        {
            "location": "/template/directories-files/#db-directory", 
            "text": "Template files in  db  are executed once for the database. Variables listed below are available in those template files.      Varible Name  Description  Example      db  pg-structure database object to access database details.  DB API    custom  Custom data provided by custom data file.  See below    options  Options provided by custom options file.  See below    {...}  Any variable provided by index.js file's allData export.  See below    {...}  Any variable provided by index.js file's dbData export.  See below", 
            "title": "\"db\" directory"
        }, 
        {
            "location": "/template/directories-files/#schema-directory", 
            "text": "Template files in  schema  are executed for each PostgreSQL schema. Variables listed below are available in those template files. Files in this directory are created relative to the root of target directory.     Varible Name  Description  Example      schema  pg-structure schema object to access database details.  Schema API    custom  Custom data provided by custom data file.  See below    options  Options provided by custom options file.  See below    {...}  Any variable provided by index.js file's allData export.  See below    {...}  Any variable provided by index.js file's schemaData export.  See below", 
            "title": "\"schema\" directory"
        }, 
        {
            "location": "/template/directories-files/#table-directory", 
            "text": "Template files in  table  are executed for each table. Variables listed below are available in those template files. Files in this directory are created relative to the root of target directory.     Varible Name  Description  Example      schema  pg-structure table object to access database details.  Table API    custom  Custom data provided by custom data file.  See below    options  Options provided by custom options file.  See below    {...}  Any variable provided by index.js file's allData export.  See below    {...}  Any variable provided by index.js file's tableData export.  See below", 
            "title": "\"table\" directory"
        }, 
        {
            "location": "/template/directories-files/#copy-directory", 
            "text": "Files in this directory are not processed by template engine and directly copied to target. Files in this directory are copied relative to the root of target directory.", 
            "title": "\"copy\" directory"
        }, 
        {
            "location": "/template/directories-files/#indexjs-file", 
            "text": "index.js  file is a node.js module file which exports  allData ,  dbData ,  schemaData  and  tableData  functions. Those functions are used to provide additional variables to template files. It makes pg-generator templates very flexible. See  Template Module API  'use strict';\n\n// This file is used for providing additional data to templates during generation phase.\n\nfunction allData(db) {\n    return {\n        extraAll: db.name\n    };\n}\n\nfunction dbData(db) {\n    return {\n        extra: db.name\n    };\n}\n\nfunction schemaData(schema) {\n    return {\n        extra: schema.name\n    };\n}\n\nfunction tableData(table) {\n    return {\n        extra: table.name\n    };\n}\n\nmodule.exports = {\n    allData: allData,\n    dbData: dbData,\n    schemaData: schemaData,\n    tableData: tableData\n};", 
            "title": "\"index.js\" file"
        }, 
        {
            "location": "/template/directories-files/#other-directories-files", 
            "text": "Other directories and files do not have any meaning for pg-generator and they are not used. However you can create any directory to organize your partial templates.", 
            "title": "Other Directories &amp; Files"
        }, 
        {
            "location": "/template/directories-files/#external-files", 
            "text": "External files are not part of the template. These optional files are set during file generation phase dynamically by options provided to  pgen  command.  $ pgen sequelize --datafile custom-data.js --optionsFile customOptions", 
            "title": "External Files"
        }, 
        {
            "location": "/template/directories-files/#custom-data-file", 
            "text": "This optional file is a node.js module which should export a simple JavaScript object. Exported object can be accessed with variable named  custom  in template files. This data may be used very flexible ways for various reasons. For example builtin sequelize template uses this file for letting user to change some default behavior of template.  Example  'use strict';\n\nmodule.exports = {\n    Account: {\n        schema: 'super_schema',\n        customTableAttribute: ' tableAtt ',\n        attributes: {\n            id: { attributeName: 'ID', type: ' fake_type_id ', onUpdate: ' UPDATE ME ', customAttribute: 3 },\n            ss: { type: ' fake_type_ss ', specialAttribute: ' ok ' },\n            dd: { type: ' fake_type_dd ', onUpdate: ' UPDATE ME TOO ', specA: 3, specB: 4, specC: 6 }\n        },\n        hasMany: {\n            HasContacts: {\n                as: 'CustomHasContacts'\n            }\n        },\n        belongsTo: {\n            Owner: {\n                as: 'CustomBelongsTo'\n            }\n        },\n        belongsToMany: {\n            ContactSecondCompanies: {\n                as: 'CustomBelongsToMany',\n                foreignKey: 'fake_id'\n            }\n        }\n    }\n};", 
            "title": "Custom Data File"
        }, 
        {
            "location": "/template/directories-files/#options-file", 
            "text": "This optional file is a node.js module which should export a simple JavaScript object. Exported object can be accessed with variable named  options  in template files. Usage of this file is same as custom data file except variable name used for accessing data.", 
            "title": "Options File"
        }, 
        {
            "location": "/template/filters/", 
            "text": "Template Filters\n\n\nFilters are essentially functions that can be applied to variables. They are called with a pipe operator (|) and can take arguments. \nnunjucks\n filters alter output of variables in place. You can use all available builtin \nnunjucks filters\n. \n\n\n{{ table.name | lower }} -\n Converts name to lower case. (i.e. Member -\n member)\n\n\n\nThey can be chained:\n\n\n{{ table.name | plural | camelCase }} -\n Converts name to plural in camel case. (i.e. member_name -\n memberNames)\n\n\n\npg-generator filters\n\n\npg-generator offfers additional filters suitable for database scaffolding. Some of them are based on highly popular \ninflection\n npm module.\n\n\n\n\n\n\n\n\nFilter Name\n\n\nDescription\n\n\nBefore\n\n\nAfter\n\n\n\n\n\n\n\n\n\n\ncamelCase\n\n\nConverts string to camelcase.\n\n\nmember_name\n\n\nmemberName\n\n\n\n\n\n\npascalCase\n\n\nConverts string to pascal case.\n\n\nmember_name\n\n\nMemberName\n\n\n\n\n\n\nclassCase\n\n\nConverts string to class case.\n\n\nmember_name\n\n\nMemberName\n\n\n\n\n\n\nsnakeCase\n\n\nConverts string to snake case.\n\n\nmemberName\n\n\nmember_name\n\n\n\n\n\n\ndashCase\n\n\nConverts string to separated by dash (-).\n\n\nmember_Name\n\n\nmember-name\n\n\n\n\n\n\nsingular\n\n\nConverts string to singular.\n\n\nmember_names\n\n\nmember_name\n\n\n\n\n\n\nplural\n\n\nConverts string to plural.\n\n\nmember_name\n\n\nmember_names\n\n\n\n\n\n\nclearDefault\n\n\nClears PostgreSQL default values to be used in JS code.\n\n\n\"O''Reilly\"\n\n\n\"O'Reilly\"\n\n\n\n\n\n\nquote\n\n\nAdds quotes to string using \nJSON.stringify\n.\n\n\nmember_name\n\n\n\"member_name\"\n\n\n\n\n\n\nsingleQuote\n\n\nAdds single quotes to string.\n\n\nmember_name\n\n\n'member_name'\n\n\n\n\n\n\nstringifyIfObject\n\n\nConverts object to string to use in template directly.\n\n\n{ name: 'George' }\n\n\n{ name: 'George' }\n\n\n\n\n\n\nstripPrefix(arg1, arg2, ...)\n\n\nStrips given texts and \nobject.name\ns from beginning of string.\n\n\ncart_cart_id\n1\n\n\ncart_id\n\n\n\n\n\n\nstripSuffix(arg1, arg2, ...)\n\n\nStrips given texts and \nobject.name\ns from end of string.\n\n\ncart_id\n2\n\n\ncart\n\n\n\n\n\n\nstrip(arg1, arg2, ...)\n\n\nStrips given texts and \nobject.name\ns from string.\n\n\ncart_product_id\n3\n\n\ncart_id\n\n\n\n\n\n\npadRight(length, [char])\n\n\nPads string with optional char (default space) until it's length equals to length.\n\n\nmember\n4\n\n\nmember......\n\n\n\n\n\n\nrelationName\n\n\nConverts foreign key name to be used in a relationship. If string ends with '_id' or 'id', strips it (case insensitive). Otherwise adds given prefix at the beginning of the string.\n\n\ncompany_id, account\n\n\ncompany related_account\n\n\n\n\n\n\n\n\n*\n Footnotes\n\n\n*1 {{ 'cart_cart_id'    | stripPrefix('cart') }}        -\n cart_id\n   {{ 'cart_cart_id'    | stripPrefix(cart_table) }}    -\n cart_id (Assuming cart_table.name equals cart)\n   {{ 'a_b_c_table'     | stripPrefix('a', 'b') }}      -\n c_table\n*2 {{ 'cart_id'         | stripSuffix('id') }}          -\n cart\n*3 {{ 'cart_product_id' | strip('product') }}           -\n cart_id\n*4 {{ 'member'          | padRight(10) }}               -\n member    \n- Space padded until here.\n   {{ 'member'          | padRight(10, '_') }}          -\n member____\n\n\n\nAPI of Filter Functions\n\n\nclearDefault(string) \u21d2 \nstring\n \n \nboolean\n \n \nundefined\n\n\nClears SQL type escapes (Two quote '' to one quote ') and strips beginning and trailing quotes around string.\nAlso escapes result according to JSON standards.\n\n\nReturns\n: \nstring\n \n \nboolean\n \n \nundefined\n - - Default value to use in template.  \n\n\n\n\n\n\n\n\nParam\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nstring\n\n\nstring\n\n\nDefault value returned from PostgreSQL.\n\n\n\n\n\n\n\n\n\n\nrelationName(str, [prefix]) \u21d2 \nstring\n\n\nConverts foreign key name to be used in a relationship. If string ends with '_id' or 'id', strips it (case insensitive).\nOtherwise adds given prefix at the beginning of the string. company_id -\n company, account -\n related_account\n\n\nReturns\n: \nstring\n - - Name for the belongsTo relationship.  \n\n\n\n\n\n\n\n\nParam\n\n\nType\n\n\nDefault\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nstr\n\n\nstring\n\n\n\n\nForeign key name.\n\n\n\n\n\n\n[prefix]\n\n\nstring\n\n\nrelated\n\n\nPrefix to add if no given string does not contain 'id'.\n\n\n\n\n\n\n\n\n\n\nstripPrefix(source, arguments) \u21d2 \nstring\n\n\nVariadic function which strips given list of strings or object's names from start of the source string.\n\n\nReturns\n: \nstring\n - - Cleaned string.  \n\n\n\n\n\n\n\n\nParam\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nsource\n\n\nstring\n\n\nSource string to be cleaned.\n\n\n\n\n\n\narguments\n\n\nstring\n \n \nObject\n\n\nList of strings or objects (object's names) to delete from source string.\n\n\n\n\n\n\n\n\n\n\nstripSuffix(source, arguments) \u21d2 \nstring\n\n\nVariadic function which strips given list of strings or object's names from end of the source string.\n\n\nReturns\n: \nstring\n - - Cleaned string.  \n\n\n\n\n\n\n\n\nParam\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nsource\n\n\nstring\n\n\nSource string to be cleaned.\n\n\n\n\n\n\narguments\n\n\nstring\n \n \nObject\n\n\nList of strings or objects (object's names) to delete from source string.\n\n\n\n\n\n\n\n\n\n\npadRight(str, count, [char]) \u21d2 \nstring\n\n\nPads given string's right side with given character (default space) to complete its length to count.\n\n\nReturns\n: \nstring\n - - Result string with length of count.  \n\n\n\n\n\n\n\n\nParam\n\n\nType\n\n\nDefault\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nstr\n\n\nstring\n\n\n\n\nSource string.\n\n\n\n\n\n\ncount\n\n\nnumber\n\n\n\n\nTotal length of the result string.\n\n\n\n\n\n\n[char]\n\n\nstring\n\n\nspace\n\n\nPadding character", 
            "title": "Filters"
        }, 
        {
            "location": "/template/filters/#template-filters", 
            "text": "Filters are essentially functions that can be applied to variables. They are called with a pipe operator (|) and can take arguments.  nunjucks  filters alter output of variables in place. You can use all available builtin  nunjucks filters .   {{ table.name | lower }} -  Converts name to lower case. (i.e. Member -  member)  They can be chained:  {{ table.name | plural | camelCase }} -  Converts name to plural in camel case. (i.e. member_name -  memberNames)", 
            "title": "Template Filters"
        }, 
        {
            "location": "/template/filters/#pg-generator-filters", 
            "text": "pg-generator offfers additional filters suitable for database scaffolding. Some of them are based on highly popular  inflection  npm module.     Filter Name  Description  Before  After      camelCase  Converts string to camelcase.  member_name  memberName    pascalCase  Converts string to pascal case.  member_name  MemberName    classCase  Converts string to class case.  member_name  MemberName    snakeCase  Converts string to snake case.  memberName  member_name    dashCase  Converts string to separated by dash (-).  member_Name  member-name    singular  Converts string to singular.  member_names  member_name    plural  Converts string to plural.  member_name  member_names    clearDefault  Clears PostgreSQL default values to be used in JS code.  \"O''Reilly\"  \"O'Reilly\"    quote  Adds quotes to string using  JSON.stringify .  member_name  \"member_name\"    singleQuote  Adds single quotes to string.  member_name  'member_name'    stringifyIfObject  Converts object to string to use in template directly.  { name: 'George' }  { name: 'George' }    stripPrefix(arg1, arg2, ...)  Strips given texts and  object.name s from beginning of string.  cart_cart_id 1  cart_id    stripSuffix(arg1, arg2, ...)  Strips given texts and  object.name s from end of string.  cart_id 2  cart    strip(arg1, arg2, ...)  Strips given texts and  object.name s from string.  cart_product_id 3  cart_id    padRight(length, [char])  Pads string with optional char (default space) until it's length equals to length.  member 4  member......    relationName  Converts foreign key name to be used in a relationship. If string ends with '_id' or 'id', strips it (case insensitive). Otherwise adds given prefix at the beginning of the string.  company_id, account  company related_account     *  Footnotes  *1 {{ 'cart_cart_id'    | stripPrefix('cart') }}        -  cart_id\n   {{ 'cart_cart_id'    | stripPrefix(cart_table) }}    -  cart_id (Assuming cart_table.name equals cart)\n   {{ 'a_b_c_table'     | stripPrefix('a', 'b') }}      -  c_table\n*2 {{ 'cart_id'         | stripSuffix('id') }}          -  cart\n*3 {{ 'cart_product_id' | strip('product') }}           -  cart_id\n*4 {{ 'member'          | padRight(10) }}               -  member     - Space padded until here.\n   {{ 'member'          | padRight(10, '_') }}          -  member____", 
            "title": "pg-generator filters"
        }, 
        {
            "location": "/template/filters/#api-of-filter-functions", 
            "text": "", 
            "title": "API of Filter Functions"
        }, 
        {
            "location": "/template/filters/#cleardefaultstring-string-boolean-undefined", 
            "text": "Clears SQL type escapes (Two quote '' to one quote ') and strips beginning and trailing quotes around string.\nAlso escapes result according to JSON standards.  Returns :  string     boolean     undefined  - - Default value to use in template.       Param  Type  Description      string  string  Default value returned from PostgreSQL.", 
            "title": "clearDefault(string) \u21d2 string &#124; boolean &#124; undefined"
        }, 
        {
            "location": "/template/filters/#relationnamestr-prefix-string", 
            "text": "Converts foreign key name to be used in a relationship. If string ends with '_id' or 'id', strips it (case insensitive).\nOtherwise adds given prefix at the beginning of the string. company_id -  company, account -  related_account  Returns :  string  - - Name for the belongsTo relationship.       Param  Type  Default  Description      str  string   Foreign key name.    [prefix]  string  related  Prefix to add if no given string does not contain 'id'.", 
            "title": "relationName(str, [prefix]) \u21d2 string"
        }, 
        {
            "location": "/template/filters/#stripprefixsource-arguments-string", 
            "text": "Variadic function which strips given list of strings or object's names from start of the source string.  Returns :  string  - - Cleaned string.       Param  Type  Description      source  string  Source string to be cleaned.    arguments  string     Object  List of strings or objects (object's names) to delete from source string.", 
            "title": "stripPrefix(source, arguments) \u21d2 string"
        }, 
        {
            "location": "/template/filters/#stripsuffixsource-arguments-string", 
            "text": "Variadic function which strips given list of strings or object's names from end of the source string.  Returns :  string  - - Cleaned string.       Param  Type  Description      source  string  Source string to be cleaned.    arguments  string     Object  List of strings or objects (object's names) to delete from source string.", 
            "title": "stripSuffix(source, arguments) \u21d2 string"
        }, 
        {
            "location": "/template/filters/#padrightstr-count-char-string", 
            "text": "Pads given string's right side with given character (default space) to complete its length to count.  Returns :  string  - - Result string with length of count.       Param  Type  Default  Description      str  string   Source string.    count  number   Total length of the result string.    [char]  string  space  Padding character", 
            "title": "padRight(str, count, [char]) \u21d2 string"
        }, 
        {
            "location": "/builtin-templates/tutorial/", 
            "text": "This template may be used to learn basics of pg-generator templates. Files in this template are not complicated and provides an easy start.\n\n\nUsage\n\n\n$ pgen template tutorial -t tutorial-template\n$ pgen exec tutorial-template -d our_crm -u user -p tOpSeCrEt -t tutorial", 
            "title": "Tutorial"
        }, 
        {
            "location": "/builtin-templates/tutorial/#usage", 
            "text": "$ pgen template tutorial -t tutorial-template\n$ pgen exec tutorial-template -d our_crm -u user -p tOpSeCrEt -t tutorial", 
            "title": "Usage"
        }, 
        {
            "location": "/builtin-templates/base/", 
            "text": "This template may be used to create your own templates from scratch. It generates all necessary boilerplate files.\n\n\nUsage\n\n\n$ pgen template base -t base-template\n$ pgen exec base-template -d our_crm -u user -p tOpSeCrEt -t my-template", 
            "title": "Base"
        }, 
        {
            "location": "/builtin-templates/base/#usage", 
            "text": "$ pgen template base -t base-template\n$ pgen exec base-template -d our_crm -u user -p tOpSeCrEt -t my-template", 
            "title": "Usage"
        }, 
        {
            "location": "/builtin-templates/sequelize/", 
            "text": "This template is successor of \nsequelize-pg-generator\n module which is used for creating \nsequelize\n models from existing PostgreSQL database.\n\n\nUsage\n\n\nCreate template and model files:\n\n\n$ pgen template sequelize -t sequelize-template\n$ pgen exec sequelize-template -d our_crm -u user -p tOpSeCrEt -t model\n\n\n\nIn your application, create a sequelize object and initialize models with it:\n\n\nvar Sequelize   = require('sequelize');\nvar sequelize   = new Sequelize('database', 'user', 'password', { dialect: 'postgres', logging: false });\nvar model       = require('./model/index.js').init(sequelize); // You only need to init once. You can just require later.\n\nmodel.Company.findOne({ where: {id: 1} })\n    .then(function(company) {\n        console.log(company.name);\n    })\n    .catch(function(error) {\n        console.log(err.stack);\n    });\n\n\n\n\nAfter you initialized your model, you shouldn't initialize it again and just require your model like below:\n\n\nvar model = require('./model/index.js');    // No init here, because it is initialized before.\n\n// Your code here.\n\n\n\n\nFeatures:\n\n\n\n\nGenerated model files are as similar as possible to official Sequelize documents.\n\n\nCreated files are static and transparent. They are not used to create models dynamically. So debugging and seeing what is generated is very easy for humans.\n\n\nDocumented,\n\n\nTested,\n\n\nNo Dependencies on generated files,\n\n\nMulti schema support,\n\n\nOne to many relation support (hasMany and belongsTo),\n\n\nMany to many relation support (belongsToMany),\n\n\nInter-schema relation support. (i.e. public.account table to other_schema.cutomer table),\n\n\nUltimately configurable and customizable by modifying template files,\n\n\nNo configuration file to modify,\n\n\nCLI support,\n\n\nDefault smart naming of models and relations,\n\n\nVery easy to override auto generated files,\n\n\nTable Specific Configuration.\n\n\n\n\nTemplate Utility Functions\n\n\nTemplates have passed a variable called \nutil\n which provides some useful utilities.\n\n\ntype: {{ util.sequelizeType(column) }}  -\n type: DataTypes.INTEGER\n\n\n\n\n\nuniqueRelatedTables(table) \u21d2 \nArray.\npgStructure.table\n\n\nReturns an array of all tables related to this table. Duplicates are removed, so every related table in the result array is unique.\n\n\nKind\n: global function\n\n\nReturns\n: \nArray.\npgStructure.table\n - - List of related tables.  \n\n\n\n\n\n\n\n\nParam\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ntable\n\n\npgStructure.table\n\n\npg-structure table\n to search related tables for.\n\n\n\n\n\n\n\n\n\n\nsequelizeType(column) \u21d2 \nstring\n\n\nReturns Sequelize ORM data type for given column.\n\n\nKind\n: global function\n\n\nReturns\n: \nstring\n - - Sequelize data type.  \n\n\n\n\n\n\n\n\nParam\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncolumn\n\n\npgStructure.column\n\n\npg-structure column object\n.\n\n\n\n\n\n\n\n\nExample\n  \n\n\n{{ util.sequelizeType() }}        // DataTypes.INTEGER(3)\n{{ sequelizeType('Sequelize') }}  // Sequelize.INTEGER(3)\n\n\n\nRelations\n\n\nRelations are detected automatically. One to many (hasMany), many to one (belongsTo) and many to many (belongsToMany) relations are detected automatically. If two tables are joined via a join table this module detects it automatically and generates many to many sequelize relations. If a table has more than one foreign key, then it is considered join table. In reality it may not be a join table. However it is impossible to detect that.\n\n\nSpecial Case: hasOne\n\n\nIn short: \nhasMany\n relations can be converted to \nhasOne\nrelations manually using \ncustom-data.js\n.\n\n\nDetails: \none to one (hasOne)\n relations does not really bring any design benefits. In fact, it would cause performance overheads to the database engine for having to link the table rows together. The 2 tables can actually be combined into a single table. However Sequelize provides \nhasOne\n type relations. Since there is no way to detect \none to one\n relations automatically, they have to be added manually by using \ncustom data file\n\n\nFor example:\nSuppose Company has many Contacts. To make it one to one relation, below example may be added to \ncustom-data.js\n. Please note \nContact\n key is singular.\n\n\nKey should be singular version of \nhasMany\n aliases. \n\n\nmodule.exports = {\n    Company: {\n        hasOne: {\n            Contact: {}\n        }\n    }\n};\n\n\n\n\nSmart Default Naming of Aliases\n\n\nThis template uses table names or schema table names for model naming. For relations it uses foreign key names and relation names from your database. (You are naming your relations in database meaningfully right?) Default template is based on camelCase naming. You can easily change it to use snake_case or PascalCase by using provided filters. Naming conventions are based on Sequelize module suggestions and generated explicitly with 'as' parameter. Aliases can be turned of by providing a custom options file and setting \ngenerateAliases\n false.\n\n\n module.exports = { generateAliases: false };\n\n\n\n\n\n\n\n\n\nType of Object\n\n\nFilters\n\n\nDefault Naming \n Alias Rule\n\n\n\n\n\n\n\n\n\n\ntable\n\n\nclassCase\n\n\nTable name.\n\n\n\n\n\n\nhasMany\n\n\nplural, classCase, stripPrefix(source)\n\n\nRelation name in database. Table name stripped from beginning.\n\n\n\n\n\n\nbelongsTo\n\n\nsingular, classCase, relationName\n\n\nForeign key column name. If name ends with 'id' or '_id' it will be stripped. Otherwise 'related' is added at the beginning to prevent it from clashing with column name.\n\n\n\n\n\n\nbelongsToMany\n\n\nplural, classCase, relationName('')\n\n\nJoin table name + foreign key in join table which refers to other table. If name ends with 'id' or '_id' it will be stripped.\n\n\n\n\n\n\n\n\n\n\nAs an example for the schema above aliases are created as follows. Please note names of foreign keys in \ncart_line_item\n table: \nproduct_id\n and \ncart\n. To demonstrate different naming rules 'product_id' contains \nid\n suffix while 'cart' not.\n\n\n\n\n\n\n\n\nRelation\n\n\nAs\n\n\nWhy\n\n\n\n\n\n\n\n\n\n\nProduct.hasMany\n\n\nCartLineItems\n\n\nproduct_\ncart_line_items\n: Plural of relation name. Table name is stripped from the beginning of relation name.\n\n\n\n\n\n\nProduct.belongsToMany\n\n\nCartLineItemCarts\n\n\ncart_line_item\n + \ncart\n + \ns\n: Plural of join table name + foreign key column in join table referring to other table. '_id' suffix is stripped from column name.\n\n\n\n\n\n\nCart.belongsToMany\n\n\nCartLineItemProducts\n\n\ncart_line_item\n + \nproduct\n_id\n + \ns\n: Plural of join table name + foreign key column in join table referring to other table. '_id' suffix is stripped from column name.\n\n\n\n\n\n\nCart.hasMany\n\n\nCartLineItems\n\n\ncart_\ncart_line_items\n: Plural of relation name. Table name is stripped from the beginning of relation name.\n\n\n\n\n\n\nCartLineItem.belongsTo\n\n\nRelatedCart\n\n\nRelated\n + \ncart\n: Singular of foreign key column prefixed with \n'Related'\n. Otherwise 'Cart' relation and 'cart' column collide in same casing (camelCase, ClassCase etc.)\n\n\n\n\n\n\nCartLineItem.belongsTo\n\n\nProduct\n\n\nproduct\n_id\n: Singular of foreign key column. Id suffix is stripped from column name. Otherwise 'ProductId' relation and 'product_id' column collide in same casing (camelCase, ClassCase etc.)\n\n\n\n\n\n\n\n\nFAQ\n\n\nI have multiple schema with same table names in them. How can I prevent collision of my model names?\n\n\nIn your template;\n\n\n\n\nRename \n'sequelize/table/definition/{table.name}.js.nunj.html'\n as \n'sequelize/table/definition/{table.schema.name}-{table.name}.js.nunj.html'\n.\n\n\nChange \nmodelName macro\n in \n'sequelize/table/definition/{table.schema.name}-{table.name}.js.nunj.html'\n as \n{{ (table.schema.name + table.name) | classCase }}\n.\n\n\nAdd \n'{table.schema.name}-'\n string to \n'sequelize.import'\n and \n'require'\n parts in \n'sequelize/db/index.js.nunj.html'\n file to match new model file's names. \n\n\n\n\nI hate aliases that sequelize template generate. What can I do?\n\n\nYou have three choices. You either do:\n\n\n\n\nDisable aliases all together by creating a file named \noption.js\n (you can use any name) with content as below:\n\n\n\n\nmodule.exports = {\n    generateAliases: false  // This disables aliases all together. See partials/has-many-nunj.html and other relation templates.    \n};\n\n\n\n\nFeed that file to \npgen\n \n\n\n$ pgen exec sequelize-template -d our_crm -u user -p tOpSeCrEt -t model --optionsfile options.js\n\n\n\n\n\nOr use custom aliases for some or all models by creating a file name \ncustom-data.js\n (you can use any name) with similar content as below:\n\n\n\n\nYou can see original and overridden aliases in generated file 'relation-cheatsheet.txt'.\n\n\nAccount: {\n    hasMany: {\n        HasContacts: {                      // This is the default alias should have generated by pgen. \n            as: \n'MyBeautifulAlias'\n        // This is the alias you want. You renamed 'HasContacts' as 'MyBeautifulAlias'\n        }\n    },\n\n\n\n\n\n\nOr change alias naming for all tables by changing \nhas-many.nunj.html\n, \nbelongs-to.nunj.html\n, \nbelongs-to-many.nunj.html\n in \npartials\n directory of generated \nsequelize\n template.\n\n\n\n\n*.nunj.html file extension is ugly.\n\n\nThis is not a question. nunj.html extension is chosen because \nnunjucks\n command line tools expect files with extension \nhtml\n. However some IDE's struggle to auto complete/help/color \nnunjucks\n, swig, twig, jinja files with html extension. We can define .nunj.html extension in IDE's to differentiate template files (\n.nunj.html) and html (\n.html) files correctly and make \nnunjucks\n command line tools happy.\n\n\nHowever if you really like to use another file extension in your templates create template filw tih your desired extension and use \n--extension\n option of \npgen\n\n\n$ pgen exec sequelize-template -d our_crm -u user -p tOpSeCrEt -t model --extension html", 
            "title": "Sequelize"
        }, 
        {
            "location": "/builtin-templates/sequelize/#usage", 
            "text": "Create template and model files:  $ pgen template sequelize -t sequelize-template\n$ pgen exec sequelize-template -d our_crm -u user -p tOpSeCrEt -t model  In your application, create a sequelize object and initialize models with it:  var Sequelize   = require('sequelize');\nvar sequelize   = new Sequelize('database', 'user', 'password', { dialect: 'postgres', logging: false });\nvar model       = require('./model/index.js').init(sequelize); // You only need to init once. You can just require later.\n\nmodel.Company.findOne({ where: {id: 1} })\n    .then(function(company) {\n        console.log(company.name);\n    })\n    .catch(function(error) {\n        console.log(err.stack);\n    });  After you initialized your model, you shouldn't initialize it again and just require your model like below:  var model = require('./model/index.js');    // No init here, because it is initialized before.\n\n// Your code here.", 
            "title": "Usage"
        }, 
        {
            "location": "/builtin-templates/sequelize/#features", 
            "text": "Generated model files are as similar as possible to official Sequelize documents.  Created files are static and transparent. They are not used to create models dynamically. So debugging and seeing what is generated is very easy for humans.  Documented,  Tested,  No Dependencies on generated files,  Multi schema support,  One to many relation support (hasMany and belongsTo),  Many to many relation support (belongsToMany),  Inter-schema relation support. (i.e. public.account table to other_schema.cutomer table),  Ultimately configurable and customizable by modifying template files,  No configuration file to modify,  CLI support,  Default smart naming of models and relations,  Very easy to override auto generated files,  Table Specific Configuration.", 
            "title": "Features:"
        }, 
        {
            "location": "/builtin-templates/sequelize/#template-utility-functions", 
            "text": "Templates have passed a variable called  util  which provides some useful utilities.  type: {{ util.sequelizeType(column) }}  -  type: DataTypes.INTEGER", 
            "title": "Template Utility Functions"
        }, 
        {
            "location": "/builtin-templates/sequelize/#uniquerelatedtablestable-arraypgstructuretable", 
            "text": "Returns an array of all tables related to this table. Duplicates are removed, so every related table in the result array is unique.  Kind : global function  Returns :  Array. pgStructure.table  - - List of related tables.       Param  Type  Description      table  pgStructure.table  pg-structure table  to search related tables for.", 
            "title": "uniqueRelatedTables(table) \u21d2 Array.&lt;pgStructure.table&gt;"
        }, 
        {
            "location": "/builtin-templates/sequelize/#sequelizetypecolumn-string", 
            "text": "Returns Sequelize ORM data type for given column.  Kind : global function  Returns :  string  - - Sequelize data type.       Param  Type  Description      column  pgStructure.column  pg-structure column object .     Example     {{ util.sequelizeType() }}        // DataTypes.INTEGER(3)\n{{ sequelizeType('Sequelize') }}  // Sequelize.INTEGER(3)", 
            "title": "sequelizeType(column) \u21d2 string"
        }, 
        {
            "location": "/builtin-templates/sequelize/#relations", 
            "text": "Relations are detected automatically. One to many (hasMany), many to one (belongsTo) and many to many (belongsToMany) relations are detected automatically. If two tables are joined via a join table this module detects it automatically and generates many to many sequelize relations. If a table has more than one foreign key, then it is considered join table. In reality it may not be a join table. However it is impossible to detect that.", 
            "title": "Relations"
        }, 
        {
            "location": "/builtin-templates/sequelize/#special-case-hasone", 
            "text": "In short:  hasMany  relations can be converted to  hasOne relations manually using  custom-data.js .  Details:  one to one (hasOne)  relations does not really bring any design benefits. In fact, it would cause performance overheads to the database engine for having to link the table rows together. The 2 tables can actually be combined into a single table. However Sequelize provides  hasOne  type relations. Since there is no way to detect  one to one  relations automatically, they have to be added manually by using  custom data file  For example:\nSuppose Company has many Contacts. To make it one to one relation, below example may be added to  custom-data.js . Please note  Contact  key is singular.  Key should be singular version of  hasMany  aliases.   module.exports = {\n    Company: {\n        hasOne: {\n            Contact: {}\n        }\n    }\n};", 
            "title": "Special Case: hasOne"
        }, 
        {
            "location": "/builtin-templates/sequelize/#smart-default-naming-of-aliases", 
            "text": "This template uses table names or schema table names for model naming. For relations it uses foreign key names and relation names from your database. (You are naming your relations in database meaningfully right?) Default template is based on camelCase naming. You can easily change it to use snake_case or PascalCase by using provided filters. Naming conventions are based on Sequelize module suggestions and generated explicitly with 'as' parameter. Aliases can be turned of by providing a custom options file and setting  generateAliases  false.   module.exports = { generateAliases: false };     Type of Object  Filters  Default Naming   Alias Rule      table  classCase  Table name.    hasMany  plural, classCase, stripPrefix(source)  Relation name in database. Table name stripped from beginning.    belongsTo  singular, classCase, relationName  Foreign key column name. If name ends with 'id' or '_id' it will be stripped. Otherwise 'related' is added at the beginning to prevent it from clashing with column name.    belongsToMany  plural, classCase, relationName('')  Join table name + foreign key in join table which refers to other table. If name ends with 'id' or '_id' it will be stripped.      As an example for the schema above aliases are created as follows. Please note names of foreign keys in  cart_line_item  table:  product_id  and  cart . To demonstrate different naming rules 'product_id' contains  id  suffix while 'cart' not.     Relation  As  Why      Product.hasMany  CartLineItems  product_ cart_line_items : Plural of relation name. Table name is stripped from the beginning of relation name.    Product.belongsToMany  CartLineItemCarts  cart_line_item  +  cart  +  s : Plural of join table name + foreign key column in join table referring to other table. '_id' suffix is stripped from column name.    Cart.belongsToMany  CartLineItemProducts  cart_line_item  +  product _id  +  s : Plural of join table name + foreign key column in join table referring to other table. '_id' suffix is stripped from column name.    Cart.hasMany  CartLineItems  cart_ cart_line_items : Plural of relation name. Table name is stripped from the beginning of relation name.    CartLineItem.belongsTo  RelatedCart  Related  +  cart : Singular of foreign key column prefixed with  'Related' . Otherwise 'Cart' relation and 'cart' column collide in same casing (camelCase, ClassCase etc.)    CartLineItem.belongsTo  Product  product _id : Singular of foreign key column. Id suffix is stripped from column name. Otherwise 'ProductId' relation and 'product_id' column collide in same casing (camelCase, ClassCase etc.)", 
            "title": "Smart Default Naming of Aliases"
        }, 
        {
            "location": "/builtin-templates/sequelize/#faq", 
            "text": "", 
            "title": "FAQ"
        }, 
        {
            "location": "/builtin-templates/sequelize/#i-have-multiple-schema-with-same-table-names-in-them-how-can-i-prevent-collision-of-my-model-names", 
            "text": "In your template;   Rename  'sequelize/table/definition/{table.name}.js.nunj.html'  as  'sequelize/table/definition/{table.schema.name}-{table.name}.js.nunj.html' .  Change  modelName macro  in  'sequelize/table/definition/{table.schema.name}-{table.name}.js.nunj.html'  as  {{ (table.schema.name + table.name) | classCase }} .  Add  '{table.schema.name}-'  string to  'sequelize.import'  and  'require'  parts in  'sequelize/db/index.js.nunj.html'  file to match new model file's names.", 
            "title": "I have multiple schema with same table names in them. How can I prevent collision of my model names?"
        }, 
        {
            "location": "/builtin-templates/sequelize/#i-hate-aliases-that-sequelize-template-generate-what-can-i-do", 
            "text": "You have three choices. You either do:   Disable aliases all together by creating a file named  option.js  (you can use any name) with content as below:   module.exports = {\n    generateAliases: false  // This disables aliases all together. See partials/has-many-nunj.html and other relation templates.    \n};  Feed that file to  pgen    $ pgen exec sequelize-template -d our_crm -u user -p tOpSeCrEt -t model --optionsfile options.js   Or use custom aliases for some or all models by creating a file name  custom-data.js  (you can use any name) with similar content as below:   You can see original and overridden aliases in generated file 'relation-cheatsheet.txt'.  Account: {\n    hasMany: {\n        HasContacts: {                      // This is the default alias should have generated by pgen. \n            as:  'MyBeautifulAlias'         // This is the alias you want. You renamed 'HasContacts' as 'MyBeautifulAlias'\n        }\n    },   Or change alias naming for all tables by changing  has-many.nunj.html ,  belongs-to.nunj.html ,  belongs-to-many.nunj.html  in  partials  directory of generated  sequelize  template.", 
            "title": "I hate aliases that sequelize template generate. What can I do?"
        }, 
        {
            "location": "/builtin-templates/sequelize/#nunjhtml-file-extension-is-ugly", 
            "text": "This is not a question. nunj.html extension is chosen because  nunjucks  command line tools expect files with extension  html . However some IDE's struggle to auto complete/help/color  nunjucks , swig, twig, jinja files with html extension. We can define .nunj.html extension in IDE's to differentiate template files ( .nunj.html) and html ( .html) files correctly and make  nunjucks  command line tools happy.  However if you really like to use another file extension in your templates create template filw tih your desired extension and use  --extension  option of  pgen  $ pgen exec sequelize-template -d our_crm -u user -p tOpSeCrEt -t model --extension html", 
            "title": "*.nunj.html file extension is ugly."
        }, 
        {
            "location": "/builtin-templates/objection/", 
            "text": "ALPHA STAGE\n\n\nThis template is in alpha stage. Feedback needed.\n\n\nUsage\n\n\nCreate template and model files:\n\n\n$ pgen template objection-alpha -t objection-alpha-template\n$ pgen exec objection-alpha-template -d our_crm -u user -p tOpSeCrEt -t model\n\n\n\nIn your application, create a sequelize object and initialize models with it:\n\n\nconst Knex = require('knex');\nconst knex = Knex({ client: 'pg', connection: { host: 'localhost', user: 'user', password: 'password', database: 'my_database' } });\nconst models = require('./model/index');\n\nmodels.init(knex);\nconst model = models.model;\n\nmodel.Company.query()\n    .then(function(companies) {\n        console.log(companies[0].name);\n    })\n    .catch(function(error) {\n        console.log(err.stack);\n    });\n\n\n\n\nFeatures \n Targets (Some are not implemented yet):\n\n\n\n\nGenerated model files are as similar as possible to official Objection documents.\n\n\nCreated files are static and transparent. They are not used to create models dynamically. So debugging and seeing what is generated is very easy for humans.\n\n\nDocumented,\n\n\nTested,\n\n\nNo Dependencies on generated files,\n\n\nMulti schema support,\n\n\nOne to many relation support (hasMany and belongsTo),\n\n\nMany to many relation support (belongsToMany),\n\n\nInter-schema relation support. (i.e. public.account table to other_schema.cutomer table),\n\n\nDefault smart naming of models and relations,\n\n\nVery easy to override auto generated files,", 
            "title": "Objection"
        }, 
        {
            "location": "/builtin-templates/objection/#alpha-stage", 
            "text": "This template is in alpha stage. Feedback needed.", 
            "title": "ALPHA STAGE"
        }, 
        {
            "location": "/builtin-templates/objection/#usage", 
            "text": "Create template and model files:  $ pgen template objection-alpha -t objection-alpha-template\n$ pgen exec objection-alpha-template -d our_crm -u user -p tOpSeCrEt -t model  In your application, create a sequelize object and initialize models with it:  const Knex = require('knex');\nconst knex = Knex({ client: 'pg', connection: { host: 'localhost', user: 'user', password: 'password', database: 'my_database' } });\nconst models = require('./model/index');\n\nmodels.init(knex);\nconst model = models.model;\n\nmodel.Company.query()\n    .then(function(companies) {\n        console.log(companies[0].name);\n    })\n    .catch(function(error) {\n        console.log(err.stack);\n    });", 
            "title": "Usage"
        }, 
        {
            "location": "/builtin-templates/objection/#features-targets-some-are-not-implemented-yet", 
            "text": "Generated model files are as similar as possible to official Objection documents.  Created files are static and transparent. They are not used to create models dynamically. So debugging and seeing what is generated is very easy for humans.  Documented,  Tested,  No Dependencies on generated files,  Multi schema support,  One to many relation support (hasMany and belongsTo),  Many to many relation support (belongsToMany),  Inter-schema relation support. (i.e. public.account table to other_schema.cutomer table),  Default smart naming of models and relations,  Very easy to override auto generated files,", 
            "title": "Features &amp; Targets (Some are not implemented yet):"
        }, 
        {
            "location": "/api/template-module-api/", 
            "text": "Functions\n\n\n\n\nallData(db)\n \u21d2 \nObject\n\n\nObject returned from this function will be merged with template variables and available in every template file.\nThis function is executed for each generated file.\n\n\n\n\ndbData(db)\n \u21d2 \nObject\n\n\nObject returned from this function will be merged with template variables and available in templates located in\ndb directory. This function is executed for each generated file resulted from templates in db directory.\n\n\n\n\nschemaData(schema)\n \u21d2 \nObject\n\n\nObject returned from this function will be merged with template variables and available in templates located in\nschema directory. This function is executed for each generated file resulted from templates in schema directory.\n\n\n\n\ntableData(table)\n \u21d2 \nObject\n\n\nObject returned from this function will be merged with template variables and available in templates located in\ntable directory. This function is executed for each generated file resulted from templates in table directory.\n\n\n\n\n\n\n\n\nallData(db) \u21d2 \nObject\n\n\nObject returned from this function will be merged with template variables and available in every template file.\nThis function is executed for each generated file.\n\n\nKind\n: global function\n\n\nReturns\n: \nObject\n - - Object to be merged with template variables.  \n\n\n\n\n\n\n\n\nParam\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ndb\n\n\npgStructure.db\n\n\npg-structure db object\n.\n\n\n\n\n\n\n\n\n\n\ndbData(db) \u21d2 \nObject\n\n\nObject returned from this function will be merged with template variables and available in templates located in\ndb directory. This function is executed for each generated file resulted from templates in db directory.\n\n\nKind\n: global function\n\n\nReturns\n: \nObject\n - - Object to be merged with template variables.  \n\n\n\n\n\n\n\n\nParam\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ndb\n\n\npgStructure.db\n\n\npg-structure db object\n.\n\n\n\n\n\n\n\n\n\n\nschemaData(schema) \u21d2 \nObject\n\n\nObject returned from this function will be merged with template variables and available in templates located in\nschema directory. This function is executed for each generated file resulted from templates in schema directory.\n\n\nKind\n: global function\n\n\nReturns\n: \nObject\n - - Object to be merged with template variables.  \n\n\n\n\n\n\n\n\nParam\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nschema\n\n\npgStructure.schema\n\n\npg-structure schema object\n.\n\n\n\n\n\n\n\n\n\n\ntableData(table) \u21d2 \nObject\n\n\nObject returned from this function will be merged with template variables and available in templates located in\ntable directory. This function is executed for each generated file resulted from templates in table directory.\n\n\nKind\n: global function\n\n\nReturns\n: \nObject\n - - Object to be merged with template variables.  \n\n\n\n\n\n\n\n\nParam\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ntable\n\n\npgStructure.table\n\n\npg-structure table object\n.", 
            "title": "Template Module API"
        }, 
        {
            "location": "/api/template-module-api/#functions", 
            "text": "allData(db)  \u21d2  Object  Object returned from this function will be merged with template variables and available in every template file.\nThis function is executed for each generated file.   dbData(db)  \u21d2  Object  Object returned from this function will be merged with template variables and available in templates located in\ndb directory. This function is executed for each generated file resulted from templates in db directory.   schemaData(schema)  \u21d2  Object  Object returned from this function will be merged with template variables and available in templates located in\nschema directory. This function is executed for each generated file resulted from templates in schema directory.   tableData(table)  \u21d2  Object  Object returned from this function will be merged with template variables and available in templates located in\ntable directory. This function is executed for each generated file resulted from templates in table directory.", 
            "title": "Functions"
        }, 
        {
            "location": "/api/template-module-api/#alldatadb-object", 
            "text": "Object returned from this function will be merged with template variables and available in every template file.\nThis function is executed for each generated file.  Kind : global function  Returns :  Object  - - Object to be merged with template variables.       Param  Type  Description      db  pgStructure.db  pg-structure db object .", 
            "title": "allData(db) \u21d2 Object"
        }, 
        {
            "location": "/api/template-module-api/#dbdatadb-object", 
            "text": "Object returned from this function will be merged with template variables and available in templates located in\ndb directory. This function is executed for each generated file resulted from templates in db directory.  Kind : global function  Returns :  Object  - - Object to be merged with template variables.       Param  Type  Description      db  pgStructure.db  pg-structure db object .", 
            "title": "dbData(db) \u21d2 Object"
        }, 
        {
            "location": "/api/template-module-api/#schemadataschema-object", 
            "text": "Object returned from this function will be merged with template variables and available in templates located in\nschema directory. This function is executed for each generated file resulted from templates in schema directory.  Kind : global function  Returns :  Object  - - Object to be merged with template variables.       Param  Type  Description      schema  pgStructure.schema  pg-structure schema object .", 
            "title": "schemaData(schema) \u21d2 Object"
        }, 
        {
            "location": "/api/template-module-api/#tabledatatable-object", 
            "text": "Object returned from this function will be merged with template variables and available in templates located in\ntable directory. This function is executed for each generated file resulted from templates in table directory.  Kind : global function  Returns :  Object  - - Object to be merged with template variables.       Param  Type  Description      table  pgStructure.table  pg-structure table object .", 
            "title": "tableData(table) \u21d2 Object"
        }, 
        {
            "location": "/history/", 
            "text": "History \n Release Notes\n\n\nNote\n: Version history for minimal documentation updates are not listed here to prevent cluttering.\n\n\n3.5.0 / 2016-12-8\n\n\n\n\nCustom data \nattributeName\n added for \nsequelize\n template. \n#38\n.\n\n\n\n\n3.4.5 / 2016-11-17\n\n\n\n\nSSL option added to CLI. Thanks to \ngbahamondezc\n.\n\n\n\n\n3.4.2 / 2016-08-17\n\n\n\n\nAdded: \nsingleLine\n nunjucks filter added.\n\n\nFixed: Multi line database comments throw exception.\n\n\n\n\n3.4.0 / 2016-06-27\n\n\n\n\nAdded: \n-nobeautifier\n CLI option added.\n\n\nAdded: \nbeautifier\n option added.\n\n\n\n\n3.3.0 / 2016-05-05\n\n\n\n\nAdded: Objection template can be used with custom objection.Model subclass.\n\n\nChanged: Objection template is simplified. Still in alpha stage.\n\n\nChanged: Documentation update.\n\n\n\n\n3.2.4 / 2016-03-22\n\n\n\n\nFixed: Template file names contain pipe \n|\n character for filtering. It's an invalid character in windows file names.\nNow \n#\n is used for filtering. For backward compatibility \n|\n can still be used. \n\n\n\n\n3.2.0 / 2016-02-22\n\n\n\n\nAdded: New template 'objection-alpha' added. As name suggests, it is in alpha stage, needs some feedback.\n\n\n\n\n3.1.0 / 2016-02-22\n\n\n\n\nAdded: \nhasOne\n relation support for \nSequelize\n template.\n\n\n\n\n3.0.2 / 2016-02-19\n\n\n\n\nChanged: pg-structure updated to 3.1.3 to make pg-generator compatible with node.js v4 without --harmony flag.\n\n\n\n\n3.0.1 / 2016-02-18\n\n\n\n\nAdded: stringifyIfObject filter, which converts it's input to string if it is an object.\n\n\nChanged: \nsequelize\n template expands custom data objects automatically.\n\n\n\n\n3.0.0 / 2016-01-30\n\n\n\n\nChanged: pg-structure is updated to v3.1.2\n\n\nChanged: pg-structure v3 returns collections ad Map and Set instead of Object or Array. Templates are updated as necessary.\n\n\n\n\n2.0.18 / 2015-12-28\n\n\n\n\nAdded: PostgreSQL range data types for sequelize template.\n\n\nAdded: sequelize template throws more explanatory error for unknown/undefined data types.\n\n\n\n\n2.0.17 / 2015-12-09\n\n\n\n\nAdded: Additional test for sequelize template, which compares generated file with an expected result.  \n\n\nFixed: Sequelize template did not generate table description.\n\n\nChanged: pg-structure module updated to v2.0.8.\n\n\n\n\n2.0.7 / 2015-11-29\n\n\n\n\nChanged: pg-structure updated to version 2.0.0-alpha.9\n\n\n\n\n2.0.6 / 2015-11-29\n\n\n\n\nChanged: pg-structure module updated.\n\n\n\n\n2.0.0 / 2015-11-25\n\n\n\n\nCompletely rewritten from scratch.\n\n\nCAUTION: 2.0.0 is incompatible with 0.x series.\n\n\nAdded: For sequelize-pg-generator users, better direct usable generated files compared to sequelize-pg-generator. pg-generator all features and more.\n\n\nRenamed from sequelize-pg-generator to pg-generator.\n\n\nAdded: Updated pg-structure v2 API.\n\n\nAdded: Template based generation. Not limited to sequelize.\n\n\nAdded: \nwww.pg-generator.com\n web site.\n\n\nAdded: Interactive command line.\n\n\nAdded: 3 templates. (Sequelize, base and tutorial)\n\n\nRemoved: Configuration files. Templates are easier and more intuitive than config files.\n\n\nChanged: Command changed from 'spgen' to 'pgen'. \n\n\nChanged: Makefile to npm scripts.\n\n\n\n\n0.9.0\n\n\n\n\nAdded: sequelize-types are added. (pg-structure deprecated it.)\n\n\n\n\n0.8.0 / 2015-10-14\n\n\n\n\nAdded: \nalias.json\n file is generated in target directory to let developer easily override relationship names.\n\n\n\n\n0.7.0 / 2015-10-14\n\n\n\n\nChanged: Location of utils.js is changed to inside of model directory.\n\n\n\n\n0.6.0 / 2015-09-10\n\n\n\n\n-t --templateName parameter added to spgen. This name is used to choose one of the builtin template directories.\n\n\nsequalize4 template added for protect backward compatibility.\n\n\nsequalize4 template supports object references property. (references and referencesKey will be depreciated in Sequelize 4)\n\n\n\n\n0.5.4 / 2015-06-16\n\n\n\n\npg-structure updated to latest version.\n\n\n\n\n0.5.3 / 2015-06-16\n\n\n\n\nAdded: JSONB support and Boolean default value. Contributed by viniciuspinto (https://github.com/viniciuspinto)\n\n\n\n\n0.4.2 / 2015-04-27\n\n\n\n\nAdded documentation and examples.\n\n\n\n\n0.3.1 / 2015-01-10\n\n\n\n\nTested for Sequelize 2.0 RC7\n\n\n\n\n0.3.0 / 2014-12-30\n\n\n\n\nRemoved: pg-native dependency removed. Some users experienced problems during install.\n\n\nAdded: generate.addRelationNameToManyToMany configuration to prefix relation aliases prevent further name clashes which cannot be prevented by generate.addTableNameToManyToMany. Default: true.\n\n\nAdded: generate.stripFirstTableNameFromManyToMany configuration added. Default: true\n\n\nChanged: generate.addTableNameToManyToMany configuration default is false now.\n\n\nChanged: Default naming rule for many to many relations.\n\n\nAdded: Logging uses Winston module now.\n\n\nAdded: Doc update for Windows OS users.\n\n\nFixed: Database tables without any column throws error when warning configuration is true.\n\n\n\n\n0.2.0 / 2014-12-27\n\n\n\n\nAdded: Automatic alias and naming validations to prevent name clash.\n\n\nAdded: generate.addTableNameToManyToMany configuration to prefix relation aliases prevent name clash. Default: true.\n\n\nAdded: --throwError option added to CLI. This option decides wheter to throw error or simply log.\n\n\nAdded: Prevent hasMany through and belongsToMany true at the same time.\n\n\nFixed: generate.prefixForBelongsTo aliases are not properly camel cased.\n\n\nFixed: --resetConfig option does not work from CLI\n\n\nDoc update\n\n\n\n\n0.1.17 / 2014-12-26\n\n\n\n\nFixed: CLI command does not work.\n\n\nAdded: Required parameters warning.\n\n\n\n\n0.1.15 / 2014-12-26\n\n\n\n\nAdded: Turkish documentation added.\n\n\nFixed: Typos and mistakes in documents.\n\n\n\n\n0.1.12 / 2014-12-23\n\n\n\n\nAdded: Tests added.\n\n\nAdded: --nolog option added to spgen command.\n\n\nAdded: --resetConfig option. Also details and caveat added to the document.\n\n\nFix: lib/index.js exported function expects different parameters than written in documentation.\n\n\nFix: Command line arguments fixed.\n\n\nFix: Data type variable name configuration is ignored.\n\n\nDocument update.\n\n\n\n\n0.1.0 / 2014-12-23\n\n\n\n\nInitial version.", 
            "title": "History"
        }, 
        {
            "location": "/history/#history-release-notes", 
            "text": "Note : Version history for minimal documentation updates are not listed here to prevent cluttering.", 
            "title": "History &amp; Release Notes"
        }, 
        {
            "location": "/history/#350-2016-12-8", 
            "text": "Custom data  attributeName  added for  sequelize  template.  #38 .", 
            "title": "3.5.0 / 2016-12-8"
        }, 
        {
            "location": "/history/#345-2016-11-17", 
            "text": "SSL option added to CLI. Thanks to  gbahamondezc .", 
            "title": "3.4.5 / 2016-11-17"
        }, 
        {
            "location": "/history/#342-2016-08-17", 
            "text": "Added:  singleLine  nunjucks filter added.  Fixed: Multi line database comments throw exception.", 
            "title": "3.4.2 / 2016-08-17"
        }, 
        {
            "location": "/history/#340-2016-06-27", 
            "text": "Added:  -nobeautifier  CLI option added.  Added:  beautifier  option added.", 
            "title": "3.4.0 / 2016-06-27"
        }, 
        {
            "location": "/history/#330-2016-05-05", 
            "text": "Added: Objection template can be used with custom objection.Model subclass.  Changed: Objection template is simplified. Still in alpha stage.  Changed: Documentation update.", 
            "title": "3.3.0 / 2016-05-05"
        }, 
        {
            "location": "/history/#324-2016-03-22", 
            "text": "Fixed: Template file names contain pipe  |  character for filtering. It's an invalid character in windows file names.\nNow  #  is used for filtering. For backward compatibility  |  can still be used.", 
            "title": "3.2.4 / 2016-03-22"
        }, 
        {
            "location": "/history/#320-2016-02-22", 
            "text": "Added: New template 'objection-alpha' added. As name suggests, it is in alpha stage, needs some feedback.", 
            "title": "3.2.0 / 2016-02-22"
        }, 
        {
            "location": "/history/#310-2016-02-22", 
            "text": "Added:  hasOne  relation support for  Sequelize  template.", 
            "title": "3.1.0 / 2016-02-22"
        }, 
        {
            "location": "/history/#302-2016-02-19", 
            "text": "Changed: pg-structure updated to 3.1.3 to make pg-generator compatible with node.js v4 without --harmony flag.", 
            "title": "3.0.2 / 2016-02-19"
        }, 
        {
            "location": "/history/#301-2016-02-18", 
            "text": "Added: stringifyIfObject filter, which converts it's input to string if it is an object.  Changed:  sequelize  template expands custom data objects automatically.", 
            "title": "3.0.1 / 2016-02-18"
        }, 
        {
            "location": "/history/#300-2016-01-30", 
            "text": "Changed: pg-structure is updated to v3.1.2  Changed: pg-structure v3 returns collections ad Map and Set instead of Object or Array. Templates are updated as necessary.", 
            "title": "3.0.0 / 2016-01-30"
        }, 
        {
            "location": "/history/#2018-2015-12-28", 
            "text": "Added: PostgreSQL range data types for sequelize template.  Added: sequelize template throws more explanatory error for unknown/undefined data types.", 
            "title": "2.0.18 / 2015-12-28"
        }, 
        {
            "location": "/history/#2017-2015-12-09", 
            "text": "Added: Additional test for sequelize template, which compares generated file with an expected result.    Fixed: Sequelize template did not generate table description.  Changed: pg-structure module updated to v2.0.8.", 
            "title": "2.0.17 / 2015-12-09"
        }, 
        {
            "location": "/history/#207-2015-11-29", 
            "text": "Changed: pg-structure updated to version 2.0.0-alpha.9", 
            "title": "2.0.7 / 2015-11-29"
        }, 
        {
            "location": "/history/#206-2015-11-29", 
            "text": "Changed: pg-structure module updated.", 
            "title": "2.0.6 / 2015-11-29"
        }, 
        {
            "location": "/history/#200-2015-11-25", 
            "text": "Completely rewritten from scratch.  CAUTION: 2.0.0 is incompatible with 0.x series.  Added: For sequelize-pg-generator users, better direct usable generated files compared to sequelize-pg-generator. pg-generator all features and more.  Renamed from sequelize-pg-generator to pg-generator.  Added: Updated pg-structure v2 API.  Added: Template based generation. Not limited to sequelize.  Added:  www.pg-generator.com  web site.  Added: Interactive command line.  Added: 3 templates. (Sequelize, base and tutorial)  Removed: Configuration files. Templates are easier and more intuitive than config files.  Changed: Command changed from 'spgen' to 'pgen'.   Changed: Makefile to npm scripts.", 
            "title": "2.0.0 / 2015-11-25"
        }, 
        {
            "location": "/history/#090", 
            "text": "Added: sequelize-types are added. (pg-structure deprecated it.)", 
            "title": "0.9.0"
        }, 
        {
            "location": "/history/#080-2015-10-14", 
            "text": "Added:  alias.json  file is generated in target directory to let developer easily override relationship names.", 
            "title": "0.8.0 / 2015-10-14"
        }, 
        {
            "location": "/history/#070-2015-10-14", 
            "text": "Changed: Location of utils.js is changed to inside of model directory.", 
            "title": "0.7.0 / 2015-10-14"
        }, 
        {
            "location": "/history/#060-2015-09-10", 
            "text": "-t --templateName parameter added to spgen. This name is used to choose one of the builtin template directories.  sequalize4 template added for protect backward compatibility.  sequalize4 template supports object references property. (references and referencesKey will be depreciated in Sequelize 4)", 
            "title": "0.6.0 / 2015-09-10"
        }, 
        {
            "location": "/history/#054-2015-06-16", 
            "text": "pg-structure updated to latest version.", 
            "title": "0.5.4 / 2015-06-16"
        }, 
        {
            "location": "/history/#053-2015-06-16", 
            "text": "Added: JSONB support and Boolean default value. Contributed by viniciuspinto (https://github.com/viniciuspinto)", 
            "title": "0.5.3 / 2015-06-16"
        }, 
        {
            "location": "/history/#042-2015-04-27", 
            "text": "Added documentation and examples.", 
            "title": "0.4.2 / 2015-04-27"
        }, 
        {
            "location": "/history/#031-2015-01-10", 
            "text": "Tested for Sequelize 2.0 RC7", 
            "title": "0.3.1 / 2015-01-10"
        }, 
        {
            "location": "/history/#030-2014-12-30", 
            "text": "Removed: pg-native dependency removed. Some users experienced problems during install.  Added: generate.addRelationNameToManyToMany configuration to prefix relation aliases prevent further name clashes which cannot be prevented by generate.addTableNameToManyToMany. Default: true.  Added: generate.stripFirstTableNameFromManyToMany configuration added. Default: true  Changed: generate.addTableNameToManyToMany configuration default is false now.  Changed: Default naming rule for many to many relations.  Added: Logging uses Winston module now.  Added: Doc update for Windows OS users.  Fixed: Database tables without any column throws error when warning configuration is true.", 
            "title": "0.3.0 / 2014-12-30"
        }, 
        {
            "location": "/history/#020-2014-12-27", 
            "text": "Added: Automatic alias and naming validations to prevent name clash.  Added: generate.addTableNameToManyToMany configuration to prefix relation aliases prevent name clash. Default: true.  Added: --throwError option added to CLI. This option decides wheter to throw error or simply log.  Added: Prevent hasMany through and belongsToMany true at the same time.  Fixed: generate.prefixForBelongsTo aliases are not properly camel cased.  Fixed: --resetConfig option does not work from CLI  Doc update", 
            "title": "0.2.0 / 2014-12-27"
        }, 
        {
            "location": "/history/#0117-2014-12-26", 
            "text": "Fixed: CLI command does not work.  Added: Required parameters warning.", 
            "title": "0.1.17 / 2014-12-26"
        }, 
        {
            "location": "/history/#0115-2014-12-26", 
            "text": "Added: Turkish documentation added.  Fixed: Typos and mistakes in documents.", 
            "title": "0.1.15 / 2014-12-26"
        }, 
        {
            "location": "/history/#0112-2014-12-23", 
            "text": "Added: Tests added.  Added: --nolog option added to spgen command.  Added: --resetConfig option. Also details and caveat added to the document.  Fix: lib/index.js exported function expects different parameters than written in documentation.  Fix: Command line arguments fixed.  Fix: Data type variable name configuration is ignored.  Document update.", 
            "title": "0.1.12 / 2014-12-23"
        }, 
        {
            "location": "/history/#010-2014-12-23", 
            "text": "Initial version.", 
            "title": "0.1.0 / 2014-12-23"
        }, 
        {
            "location": "/license/", 
            "text": "LICENSE\n\n\nThe MIT License (MIT)\n\n\nCopyright (c) 2015 \u00d6z\u00fcm Eldo\u011fan\n\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.", 
            "title": "License"
        }, 
        {
            "location": "/license/#license", 
            "text": "The MIT License (MIT)  Copyright (c) 2015 \u00d6z\u00fcm Eldo\u011fan  Permission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:  The above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.", 
            "title": "LICENSE"
        }
    ]
}